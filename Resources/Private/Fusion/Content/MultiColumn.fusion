prototype(TechDivision.NodeTypes.FlexColumnLayouts:MultiColumn) < prototype(Neos.Neos:ContentComponent) {

    wrapperClasses = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
        wrapper = 'flex-wrapper'
    }

    containerClasses = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
        flex = 'flex'
        flexDirection = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
            flexDirection = ${q(node).property('flexDirection') ? q(node).property('flexDirection') : 'flex-row'}
            smFlexDirection = ${q(node).property('smFlexDirection')}
            mdFlexDirection = ${q(node).property('mdFlexDirection')}
            lgFlexDirection = ${q(node).property('lgFlexDirection')}
            xlFlexDirection = ${q(node).property('xlFlexDirection')}
        }
        flexWrap = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
            flexWrap = ${q(node).property('flexWrap') ? q(node).property('flexWrap') : 'flex-wrap'}
            smFlexWrap = ${q(node).property('smFlexWrap')}
            mdFlexWrap = ${q(node).property('mdFlexWrap')}
            lgFlexWrap = ${q(node).property('lgFlexWrap')}
            xlFlexWrap = ${q(node).property('xlFlexWrap')}
        }
        flexJustify = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
            flexJustify = ${q(node).property('flexJustify')}
            smFlexJustify = ${q(node).property('smFlexJustify')}
            mdFlexJustify = ${q(node).property('mdFlexJustify')}
            lgFlexJustify = ${q(node).property('lgFlexJustify')}
            xlFlexJustify = ${q(node).property('xlFlexJustify')}
        }
        flexAlignItems = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
            flexAlignItems = ${q(node).property('flexAlignItems')}
            smFlexAlignItems = ${q(node).property('smFlexAlignItems')}
            mdFlexAlignItems = ${q(node).property('mdFlexAlignItems')}
            lgFlexAlignItems = ${q(node).property('lgFlexAlignItems')}
            xlFlexAlignItems = ${q(node).property('xlFlexAlignItems')}
        }
        flexAlignContent = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
            flexAlignContent = ${q(node).property('flexAlignContent')}
            smFlexAlignContent = ${q(node).property('smFlexAlignContent')}
            mdFlexAlignContent = ${q(node).property('mdFlexAlignContent')}
            lgFlexAlignContent = ${q(node).property('lgFlexAlignContent')}
            xlFlexAlignContent = ${q(node).property('xlFlexAlignContent')}
        }
        verticalSeparator = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
            verticalSeparator = ${q(node).property('verticalSeparator') ? 'vertical-separator' : ''}
            smVerticalSeparator = ${q(node).property('smVerticalSeparator') ? 'sm:vertical-separator' : ''}
            mdVerticalSeparator = ${q(node).property('mdVerticalSeparator') ? 'md:vertical-separator' : ''}
            lgVerticalSeparator = ${q(node).property('lgVerticalSeparator') ? 'lg:vertical-separator' : ''}
            xlVerticalSeparator = ${q(node).property('xlVerticalSeparator') ? 'xl:vertical-separator' : ''}
        }
    }
    containerStyles = TechDivision.NodeTypes.FlexColumnLayouts:Helper.VisualStyles

    columns = Neos.Fusion:Collection {
        @context.columnLayout = ${q(node).property('layout')}
        @context.parentNode = ${node}
        collection = ${q(node).children('[instanceof TechDivision.NodeTypes.FlexColumnLayouts:FlexCollection]')}
        itemName = 'node'
        iterationName = 'columnIteration'
        itemRenderer = Neos.Neos:ContentCollection {
            nodePath = '.'
            attributes = Neos.Fusion:Attributes {
                class >
                class = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
                    flexItem = ${'flex-item'}
                    layout = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
                        basis = ${q(node).property('flexBasis') ? q(node).property('flexBasis') : (q(parentNode).property('layout') ? 'flex-basis-' + String.split(q(parentNode).property('layout'), '-')[columnIteration.index] : '')}
                        smBasis = ${q(node).property('smFlexBasis') ? q(node).property('smFlexBasis') : (q(parentNode).property('smLayout') ? 'sm:flex-basis-' + String.split(q(parentNode).property('smLayout'), '-')[columnIteration.index] : '')}
                        mdBasis = ${q(node).property('mdFlexBasis') ? q(node).property('mdFlexBasis') : (q(parentNode).property('mdLayout') ? 'md:flex-basis-' + String.split(q(parentNode).property('mdLayout'), '-')[columnIteration.index] : '')}
                        lgBasis = ${q(node).property('lgFlexBasis') ? q(node).property('lgFlexBasis') : (q(parentNode).property('lgLayout') ? 'lg:flex-basis-' + String.split(q(parentNode).property('lgLayout'), '-')[columnIteration.index] : '')}
                        xlBasis = ${q(node).property('xlFlexBasis') ? q(node).property('xlFlexBasis') : (q(parentNode).property('xlLayout') ? 'xl:flex-basis-' + String.split(q(parentNode).property('xlLayout'), '-')[columnIteration.index] : '')}
                    }
                    shrink = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
                        shrink = ${q(node).property('flexShrink')}
                        smShrink = ${q(node).property('smFlexShrink')}
                        mdShrink = ${q(node).property('mdFlexShrink')}
                        lgShrink = ${q(node).property('lgFlexShrink')}
                        xlShrink = ${q(node).property('xlFlexShrink')}
                    }
                    order = TechDivision.NodeTypes.FlexColumnLayouts:Helper.CssClasses {
                        order = ${q(node).property('flexOrder')}
                        smOrder = ${q(node).property('smFlexOrder')}
                        mdOrder = ${q(node).property('mdFlexOrder')}
                        lgOrder = ${q(node).property('lgFlexOrder')}
                        xlOrder = ${q(node).property('xlFlexOrder')}
                    }
                }
                style = TechDivision.NodeTypes.FlexColumnLayouts:Helper.VisualStyles
            }
        }
    }
    renderer = afx`
        <section class={props.wrapperClasses} style={props.containerStyles}>
            <div class={props.containerClasses}>
                {props.columns}
            </div>
        </section>
    `
}
